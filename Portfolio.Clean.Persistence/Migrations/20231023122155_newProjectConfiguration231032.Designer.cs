// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Portfolio.Clean.Persistence.DatabaseContext;

#nullable disable

namespace Portfolio.Clean.Persistence.Migrations
{
    [DbContext(typeof(PortfolioDatabaseContext))]
    [Migration("20231023122155_newProjectConfiguration231032")]
    partial class newProjectConfiguration231032
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Portfolio.Clean.Domain.ContactEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactEmailContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmailObject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmailSender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ContactEmails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactEmailContent = "This first ContactEmail is a test for db initialization",
                            ContactEmailObject = "Initialization test",
                            ContactEmailSender = "Configuration",
                            CreationDate = new DateTime(2023, 10, 23, 14, 21, 55, 765, DateTimeKind.Local).AddTicks(902),
                            LastUpdate = new DateTime(2023, 10, 23, 14, 21, 55, 765, DateTimeKind.Local).AddTicks(857)
                        });
                });

            modelBuilder.Entity("Portfolio.Clean.Domain.PCLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PCLogContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PCLogs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2023, 10, 23, 14, 21, 55, 765, DateTimeKind.Local).AddTicks(1701),
                            LastUpdate = new DateTime(2023, 10, 23, 14, 21, 55, 765, DateTimeKind.Local).AddTicks(1696),
                            PCLogContent = "This first PCLog is a test for db initialization"
                        });
                });

            modelBuilder.Entity("Portfolio.Clean.Domain.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectDescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectDescriptionFr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectDescriptionJp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectGithub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectTechnologies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectTitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectTitleFr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectTitleJp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectVideo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2023, 10, 23, 14, 21, 55, 765, DateTimeKind.Local).AddTicks(2244),
                            LastUpdate = new DateTime(2023, 10, 23, 14, 21, 55, 765, DateTimeKind.Local).AddTicks(2241),
                            ProjectDescriptionEn = "The database is working",
                            ProjectDescriptionFr = "La base de données fonctionne",
                            ProjectDescriptionJp = "データベースが発動されました",
                            ProjectName = "test1",
                            ProjectTechnologies = "csharp,blazor, webassembly, html, css, iis",
                            ProjectTitleEn = "Test Project",
                            ProjectTitleFr = "Projet Test",
                            ProjectTitleJp = "テストプロジェクト"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2023, 10, 23, 14, 21, 55, 765, DateTimeKind.Local).AddTicks(2249),
                            LastUpdate = new DateTime(2023, 10, 23, 14, 21, 55, 765, DateTimeKind.Local).AddTicks(2248),
                            ProjectDescriptionEn = "The database is working",
                            ProjectDescriptionFr = "La base de données fonctionne",
                            ProjectDescriptionJp = "データベースが発動されました",
                            ProjectName = "test2",
                            ProjectTechnologies = "Csharp, Typescript, Angular, HTML, CSS, IIS",
                            ProjectTitleEn = "Test Project 2",
                            ProjectTitleFr = "Projet Test 2",
                            ProjectTitleJp = "テストプロジェクト 2"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
